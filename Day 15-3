//Day 15/100
//Problem - Merge Two Sorted Lists (Easy)
//Platform - Leetcode
//Problem Code on Leetcode - 21
//Approach - Two Pointer Method
//Time Complexity - O(m+n) ['m' Represents Length of Linked List 1, 'n' Represents Length of Linked List 2]
//Space Complexity - O(m+n) ['m' Represents Length of Linked List 1, 'n' Represents Length of Linked List 2]

//JAVA Code :-

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 == null && list2== null)
        {
            return null;
        }
        if(list1==null && list2!=null)
        {
            return list2;
        }
        if(list2==null && list1!=null)
        {
            return list1;
        }
        ListNode list3=null;
        ListNode temp=null;
        if(list1.val<list2.val)
        {
            list3=new ListNode(list1.val);
            temp=list3;
            list1=list1.next;
        }
        else
        {
            list3=new ListNode(list2.val);
            temp=list3;
            list2=list2.next;
        }
        while(list1!=null && list2!=null)
        {
            if(list1.val<list2.val)
            {
                temp.next=list1;
                temp=temp.next;
                list1=list1.next;
            }
            else
            {
                temp.next=list2;
                temp=temp.next;
                list2=list2.next;
            }
        }
        while(list1!=null)
        {
            temp.next=list1;
            temp=temp.next;
            list1=list1.next;
        }
         while(list2!=null)
        {
            temp.next=list2;
            temp=temp.next;
            list2=list2.next;
        }
        return list3;
    }
}
