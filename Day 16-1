//Day 16/100
//Problem - Remove Nth Node From End of List (Medium)
//Platform - Leetcode
//Problem Code on Leetcode - 19
//Approach - Simply Traversing Through The Linked List and Counting All Nodes, Then Moving To The (count-n=1)th Node
             [Decrementing Count Upon Moving Through Each Node] and Deleting The Next Node.
//Time Complexity - O(n)
//Space Complexity - O(1)

//JAVA Code :-

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head.next==null && n==1)
        {
            return null;
        }
        int count=0;
        ListNode temp=head;
        while(temp!=null)
        {
            count++;
            temp=temp.next;
        }
        ListNode temp1=new ListNode(-1);
        temp1.next=head;
        while(count-n>=1 && temp1.next!=null)
        {
            count--;
            temp1=temp1.next;
        }
        if(temp1.next==head)
        {
            return head.next;
        }
        temp1.next=temp1.next.next;
        return head;
    }
}
